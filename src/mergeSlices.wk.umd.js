!function(I,d){"object"==typeof exports&&"undefined"!=typeof module?module.exports=d(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],d):(I="undefined"!=typeof globalThis?globalThis:I||self).mergeSlices=d(I.worker_threads)}(this,(function(I){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var d={};return function(d,C){d.exports=function(I){var d={};!function(I){var d=Object.prototype.hasOwnProperty,C="~";function l(){}function c(I,d,C){this.fn=I,this.context=d,this.once=C||!1}function g(I,d,l,g,i){if("function"!=typeof l)throw new TypeError("The listener must be a function");var X=new c(l,g||I,i),m=C?C+d:d;return I._events[m]?I._events[m].fn?I._events[m]=[I._events[m],X]:I._events[m].push(X):(I._events[m]=X,I._eventsCount++),I}function i(I,d){0==--I._eventsCount?I._events=new l:delete I._events[d]}function X(){this._events=new l,this._eventsCount=0}Object.create&&(l.prototype=Object.create(null),(new l).__proto__||(C=!1)),X.prototype.eventNames=function(){var I,l,c=[];if(0===this._eventsCount)return c;for(l in I=this._events)d.call(I,l)&&c.push(C?l.slice(1):l);return Object.getOwnPropertySymbols?c.concat(Object.getOwnPropertySymbols(I)):c},X.prototype.listeners=function(I){var d=C?C+I:I,l=this._events[d];if(!l)return[];if(l.fn)return[l.fn];for(var c=0,g=l.length,i=new Array(g);c<g;c++)i[c]=l[c].fn;return i},X.prototype.listenerCount=function(I){var d=C?C+I:I,l=this._events[d];return l?l.fn?1:l.length:0},X.prototype.emit=function(I,d,l,c,g,i){var X=C?C+I:I;if(!this._events[X])return!1;var m,n,b=this._events[X],e=arguments.length;if(b.fn){switch(b.once&&this.removeListener(I,b.fn,void 0,!0),e){case 1:return b.fn.call(b.context),!0;case 2:return b.fn.call(b.context,d),!0;case 3:return b.fn.call(b.context,d,l),!0;case 4:return b.fn.call(b.context,d,l,c),!0;case 5:return b.fn.call(b.context,d,l,c,g),!0;case 6:return b.fn.call(b.context,d,l,c,g,i),!0}for(n=1,m=new Array(e-1);n<e;n++)m[n-1]=arguments[n];b.fn.apply(b.context,m)}else{var o,Z=b.length;for(n=0;n<Z;n++)switch(b[n].once&&this.removeListener(I,b[n].fn,void 0,!0),e){case 1:b[n].fn.call(b[n].context);break;case 2:b[n].fn.call(b[n].context,d);break;case 3:b[n].fn.call(b[n].context,d,l);break;case 4:b[n].fn.call(b[n].context,d,l,c);break;default:if(!m)for(o=1,m=new Array(e-1);o<e;o++)m[o-1]=arguments[o];b[n].fn.apply(b[n].context,m)}}return!0},X.prototype.on=function(I,d,C){return g(this,I,d,C,!1)},X.prototype.once=function(I,d,C){return g(this,I,d,C,!0)},X.prototype.removeListener=function(I,d,l,c){var g=C?C+I:I;if(!this._events[g])return this;if(!d)return i(this,g),this;var X=this._events[g];if(X.fn)X.fn!==d||c&&!X.once||l&&X.context!==l||i(this,g);else{for(var m=0,n=[],b=X.length;m<b;m++)(X[m].fn!==d||c&&!X[m].once||l&&X[m].context!==l)&&n.push(X[m]);n.length?this._events[g]=1===n.length?n[0]:n:i(this,g)}return this},X.prototype.removeAllListeners=function(I){var d;return I?(d=C?C+I:I,this._events[d]&&i(this,d)):(this._events=new l,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=C,X.EventEmitter=X,I.exports=X}({get exports(){return d},set exports(I){d=I}});var C=d;let l;!function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=(c="",Buffer.from(c,"base64").toString("utf8"));var c;function g(){let l=new C,c=function(d){try{return new I.Worker(d,{eval:!0})}catch(I){i(I)}}(d);if(!c)return i("invalid worker"),null;function g(){let I=function(){let I,d,C=new Promise((function(){I=arguments[0],d=arguments[1]}));return C.resolve=I,C.reject=d,C}(),d=function(){let I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,d=[],C="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),l=C.length;for(let c=0;c<I;c++)d[c]=C[0|Math.random()*l];return d.join("")}(),C={mode:"call",id:d,fun:"main",input:[...arguments]};return c.postMessage(C),l.once(d,(d=>{"success"===d.state?I.resolve(d.msg):I.reject(d.msg)})),I}function i(I){l.emit("error",I)}return c.on("message",(function(I){let d=I,C=d.mode;"emit"!==C&&"return"!==C||("emit"===C&&l.emit(d.evName,d.msg),"return"===C&&l.emit(d.id,d))})),c.on("error",i),c.on("exit",(I=>{1!==I&&i("exit code["+I+"] !== 1")})),function(){let I={mode:"init",type:"function",input:[...arguments]};c.postMessage(I)}([...arguments]),l.main=g,l.main=g,l.terminate=function(){c?(c.terminate(),c=void 0):i("worker has been terminated")},l}l=async function(){let I=[...arguments],d=g();return await d.main(...I).finally((()=>{d.terminate()}))}}();try{process.on("unhandledRejection",(I=>{console.log("outer:unhandledRejection",I)})),process.on("uncaughtException",(I=>{console.log("outer:uncaughtException",I)})),process.on("uncaughtExceptionMonitor",(I=>{console.log("outer:uncaughtExceptionMonitor",I)}))}catch(I){}return l}(I)}({get exports(){return d},set exports(I){d=I}}),d}));
